name: Security Scan

on:
  push:
    branches: [main]
    paths:
      - "terraform/**"
      - "docker-compose/**"
      - ".github/workflows/security-scan.yml"
  pull_request:
    branches: [main]
    paths:
      - "terraform/**"
      - "docker-compose/**"
      - ".github/workflows/security-scan.yml"
  schedule:
    - cron: "0 0 * * 0" # Run weekly on Sunday at midnight

jobs:
  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform
          framework: terraform
          quiet: true
          skip_check: CKV_AWS_* # Skip AWS checks if you're only using GCP

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Check existing Docker and Docker Compose
      - name: Check Docker setup
        run: |
          docker --version
          docker compose version || echo "Compose plugin not available"
          which docker-compose || echo "Standalone docker-compose not found"

      # Install Docker Compose V2 as a plugin (most reliable method)
      - name: Install Docker Compose V2
        run: |
          DOCKER_COMPOSE_VERSION=v2.24.6
          mkdir -p ~/.docker/cli-plugins/
          curl -SL "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          docker compose version

      - name: Docker Compose Validation
        run: |
          cd docker-compose
          docker compose config -q

      # Check for docker-compose.yml
      - name: Check Docker Compose file
        id: check_compose
        run: |
          if [ -f "docker-compose/docker-compose.yml" ] || [ -f "docker-compose/docker-compose.yaml" ]; then
            echo "compose_file_exists=true" >> $GITHUB_OUTPUT
            echo "Docker Compose file found"
          else
            echo "compose_file_exists=false" >> $GITHUB_OUTPUT
            echo "No Docker Compose file found"
          fi

      # Run Trivy Config Scanner only if docker-compose.yml exists
      - name: Run Trivy Config Scanner
        if: steps.check_compose.outputs.compose_file_exists == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          scan-ref: "docker-compose"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

      # Add specific checks for docker-compose security - with improved error handling
      - name: Check Docker Compose Security
        if: steps.check_compose.outputs.compose_file_exists == 'true'
        run: |
          cd docker-compose
          echo "Performing additional security checks on docker-compose files..."

          # Set shell options to continue on errors
          set +e

          # Check for insecure configurations
          echo "Checking for security issues in compose file..."
          grep -q "privileged:\s*true" docker-compose.* && echo "⚠️ Warning: Privileged mode detected" || echo "✅ No privileged mode detected"
          grep -q "host_network:\s*true" docker-compose.* && echo "⚠️ Warning: Host network mode detected" || echo "✅ No host network mode detected"
          grep -q "/var/run/docker.sock" docker-compose.* && echo "⚠️ Warning: Docker socket mount detected" || echo "✅ No Docker socket mount detected"

          # Check for image tags
          echo "Checking image references..."
          grep -q "image:.*latest" docker-compose.* && echo "⚠️ Warning: 'latest' tag detected - consider pinning versions" || echo "✅ No 'latest' tags detected"

          # Check for environment variables
          echo "Checking environment variables..."
          grep -q "env_file:" docker-compose.* && echo "✅ Using env_file for environment variables" || echo "ℹ️ No env_file directive found"

          # Ensure we exit with success
          echo "Security checks completed"
          exit 0
