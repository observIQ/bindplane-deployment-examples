name: Docker Compose Validation

on:
  push:
    branches: [main]
    paths:
      - "docker-compose/**"
      - ".github/workflows/docker-validate.yml"
  pull_request:
    branches: [main]
    paths:
      - "docker-compose/**"
      - ".github/workflows/docker-validate.yml"

jobs:
  docker-validate:
    name: Docker Compose Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Check existing Docker and Docker Compose
      - name: Check Docker setup
        run: |
          docker --version
          docker compose version || echo "Compose plugin not available"
          which docker-compose || echo "Standalone docker-compose not found"

      # Install Docker Compose V2 as a plugin (most reliable method)
      - name: Install Docker Compose V2
        run: |
          DOCKER_COMPOSE_VERSION=v2.24.6
          mkdir -p ~/.docker/cli-plugins/
          curl -SL "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          docker compose version

      - name: Docker Compose Validation
        run: |
          cd docker-compose
          docker compose config -q

      # Check if any Dockerfiles exist before linting
      - name: Check for Dockerfiles
        id: check_dockerfiles
        run: |
          if [ -d "docker-compose" ] && [ -n "$(find docker-compose -name 'Dockerfile*' -print -quit)" ]; then
            echo "dockerfiles_exist=true" >> $GITHUB_OUTPUT
            echo "Dockerfiles found in docker-compose directory"
          else
            echo "dockerfiles_exist=false" >> $GITHUB_OUTPUT
            echo "No Dockerfiles found in docker-compose directory - skipping Dockerfile linting"
          fi

      # Run Hadolint only if Dockerfiles exist
      - name: Lint Dockerfiles
        if: steps.check_dockerfiles.outputs.dockerfiles_exist == 'true'
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker-compose/Dockerfile*
          failure-threshold: error

      # Alternative approach only if Dockerfiles exist
      - name: Install Hadolint
        if: steps.check_dockerfiles.outputs.dockerfiles_exist == 'true'
        run: |
          wget -q https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint-Linux-x86_64
          sudo mv hadolint-Linux-x86_64 /usr/local/bin/hadolint

      # Run manual linting only if Dockerfiles exist
      - name: Run Hadolint manually
        if: steps.check_dockerfiles.outputs.dockerfiles_exist == 'true'
        run: |
          find docker-compose -name 'Dockerfile*' -exec hadolint {} \;

      # Validate Docker Compose file structure with improved error handling
      - name: Validate Docker Compose structure
        run: |
          cd docker-compose

          # Set shell options to continue on errors
          set +e

          if [ -f "docker-compose.yml" ] || [ -f "docker-compose.yaml" ]; then
            echo "Validating docker-compose file..."

            # Check for image references
            grep -q "image:" docker-compose.* && echo "✅ Images are properly referenced" || echo "ℹ️ No image references found"

            # Look for common issues in compose files
            echo "Checking for common issues..."
            grep -q "latest" docker-compose.* && echo "⚠️ Warning: 'latest' tag detected - consider using specific versions" || echo "✅ No 'latest' tags detected"
            grep -q "privileged: true" docker-compose.* && echo "⚠️ Warning: Privileged mode detected - review security implications" || echo "✅ No privileged mode detected"

            # Additional helpful checks
            grep -q "restart: always" docker-compose.* && echo "✅ Containers set to restart automatically" || echo "ℹ️ No automatic restart policy detected"
            grep -q "healthcheck:" docker-compose.* && echo "✅ Healthchecks configured" || echo "ℹ️ No healthchecks configured"
          else
            echo "No docker-compose.yml or docker-compose.yaml found"
          fi

          # Ensure we exit with success
          echo "Validation completed"
          exit 0
